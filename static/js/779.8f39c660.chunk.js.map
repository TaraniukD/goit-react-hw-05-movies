{"version":3,"file":"static/js/779.8f39c660.chunk.js","mappings":"mTAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAc,mCAAG,sGACLC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,qCACmBC,IAFd,cACtBG,EADsB,gBAITA,EAASC,KAJA,cAItBA,EAJsB,yBAKrBA,GALqB,2CAAH,qDAQdC,EAAa,mCAAG,WAAOC,GAAP,yFACJJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAO,EADA,oBACcN,EADd,oBADI,cACrBG,EADqB,gBAIRA,EAASC,KAJD,cAIrBA,EAJqB,yBAKpBA,GALoB,2CAAH,sDAQbG,EAAkB,mCAAG,WAAOC,GAAP,yFACTN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CQ,EAD/C,gCADS,cAC1BL,EAD0B,gBAIbA,EAASC,KAJI,cAI1BA,EAJ0B,yBAKzBA,GALyB,2CAAH,sDAQlBK,EAAe,mCAAG,WAAOH,GAAP,yFACNJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAO,EADA,4BACsBN,EADtB,oBADM,cACvBG,EADuB,gBAIVA,EAASC,KAJC,cAIvBA,EAJuB,yBAKtBA,GALsB,2CAAH,sDAQfM,EAAe,mCAAG,WAAOJ,GAAP,yFACNJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAO,EADA,4BACsBN,EADtB,2BADM,cACvBG,EADuB,gBAIVA,EAASC,KAJC,cAIvBA,EAJuB,yBAKtBA,GALsB,2CAAH,qD,qFCjCfO,EAAS,WAClB,OACI,SAAC,KAAD,CACNC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAa,UACbC,MAAQ,WAGT,C,iOCfYC,EAAKC,EAAAA,GAAAA,GAAH,uDAKFC,EAAKD,EAAAA,GAAAA,GAAH,gDAKFE,EAAQF,EAAAA,GAAAA,GAAH,wDAKLG,EAAOH,EAAAA,GAAAA,EAAH,wD,SCTJI,EAAU,WACnB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEQ1B,GAAO2B,EAAAA,EAAAA,MAAP3B,GAyBR,OAvBA4B,EAAAA,EAAAA,YAAU,WACNJ,EAAU,WAEV,IAAMK,EAAgB,mCAAG,uGACKzB,EAAAA,EAAAA,IAAgBJ,GADrB,mBAGL,KAFR8B,EADa,EACbA,SADa,uBAIjBC,IAAAA,OAAAA,KAAqB,6BAJJ,0BAOrBT,EAAWQ,GACXN,EAAU,aARW,2CAAH,qDAUtBK,IACKG,OAAM,SAACC,GACJF,IAAAA,OAAAA,QAAA,gCAAiDE,IACjDT,EAAU,QACb,IACAU,SAAQ,WACLR,GAAW,EACd,GACR,GAAE,CAAC1B,IAEW,SAAXuB,GAAqBE,GACd,SAACpB,EAAA,EAAD,IAGI,UAAXkB,GACO,gEAGY,IAAnBF,EAAQc,QACD,SAAClB,EAAD,oEAGJ,SAACH,EAAD,UACFO,EAAQe,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAAStC,EAAS,EAATA,GAC7B,OAAO,UAACgB,EAAD,YACH,UAACC,EAAD,sBAAgBoB,MAChB,SAACnB,EAAD,UAAOoB,MAFKtC,EAInB,KAER,EAED,G","sources":["Api/Api.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6e3f0e76f4e133cf6c14fe47c545e154';\n\nexport const getPopularFilm = async () => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n  \nexport const getInfoByFilm = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const searchMoviesbyName = async (query) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const getMovieCredits = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const getMovieReviews = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n","\nimport React from \"react\";\nimport { MagnifyingGlass } from 'react-loader-spinner'\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"MagnifyingGlass-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"MagnifyingGlass-wrapper\"\n  glassColor = '#c0efff'\n  color = '#e15b64'\n/>\n    )\n}","import styled from \"styled-components\";\n\nexport const Ul = styled.ul`\npadding: 5px;\nwidth: 1200px;\n`;\n\nexport const Li = styled.li`\nmargin-bottom: 20px;\n\n`;\n\nexport const Title = styled.h4`\nmargin: 0px;\nmargin-top: 7px;\n`;\n\nexport const Text = styled.p`\nmargin: 0px;\nmargin-top: 7px;\n`;","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Notiflix from \"notiflix\";\nimport { useEffect, useState } from \"react\";\nimport { getMovieReviews } from \"Api/Api\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Ul, Li, Title, Text  } from \"./Reviews.styled\";\n\nexport const Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [status, setStatus] = useState('idle');\n    const [loading, setLoading] = useState(false);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        setStatus('loading');\n\n        const getReviewsbyFilm = async () => {\n            const { results } = await getMovieReviews(id);\n\n            if (results === 0) {\n                Notiflix.Notify.info('Sorry, No reviews list :(');\n                return;\n            }\n            setReviews(results);\n            setStatus('fulfilled');\n        }\n        getReviewsbyFilm()\n            .catch((error) => {\n                Notiflix.Notify.warning(`Something went wrong! ${error}`);\n                setStatus('error');\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [id]);\n\n    if (status === 'idle' || loading) {\n        return <Loader />\n    };\n\n    if (status === 'error') {\n        return <> Error, Something went wrong!</>\n    };\n\n    if (reviews.length === 0) {\n        return <Title>No reviews. You will be the first to leave a review!</Title>\n    };\n\n    return <Ul>\n        {reviews.map(({ author, content, id }) => {\n            return <Li key={id}>\n                <Title>Author: {author}</Title>\n                <Text>{content}</Text>\n            </Li>\n        })}\n    </Ul>\n};\n\nexport default Reviews;"],"names":["BASE_URL","API_KEY","getPopularFilm","axios","fetchAPI","data","getInfoByFilm","id","searchMoviesbyName","query","getMovieCredits","getMovieReviews","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","Ul","styled","Li","Title","Text","Reviews","useState","reviews","setReviews","status","setStatus","loading","setLoading","useParams","useEffect","getReviewsbyFilm","results","Notiflix","catch","error","finally","length","map","author","content"],"sourceRoot":""}