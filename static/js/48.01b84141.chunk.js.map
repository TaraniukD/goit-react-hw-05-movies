{"version":3,"file":"static/js/48.01b84141.chunk.js","mappings":"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","sources":["Api/Api.js","components/Loader/Loader.jsx","components/Poster/Poster.jsx","components/FilmInfo/Filminfo.styled.js","components/FilmInfo/FilmInfo.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6e3f0e76f4e133cf6c14fe47c545e154';\n\nexport const getPopularFilm = async () => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n  \nexport const getInfoByFilm = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const searchMoviesbyName = async (query) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const getMovieCredits = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const getMovieReviews = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n","\nimport React from \"react\";\nimport { MagnifyingGlass } from 'react-loader-spinner'\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"MagnifyingGlass-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"MagnifyingGlass-wrapper\"\n  glassColor = '#c0efff'\n  color = '#e15b64'\n/>\n    )\n}","import React from \"react\";\nimport PropType from \"prop-types\";\n\nexport const Poster = ({ poster, title }) => {\n\n  return <>\n    {poster ?\n      <img src={`https://image.tmdb.org/t/p/w500/${poster}`}\n        alt={title}\n        width=\"100%\"\n        height=\"100%\"\n      /> :\n      <img src=\"https://p.kindpng.com/picc/s/736-7369205_play-button-png-pic-video-default-transparent-png.png\"\n        alt={title}\n        width=\"100%\"\n        height=\"100%\"\n      />}\n  </>\n};\n\nPoster.propTypes = {\n  poster: PropType.string,\n  title: PropType.string.isRequired\n};","import styled from \"styled-components\";\n\nexport const Ul= styled.ul`\ndisplay: flex;\ngap: 10px;\npadding: 0;\n`;\n\nexport const DivInfo = styled.div`\nmax-width: 750px;\n`;\n\n","import React from \"react\";\nimport { Ul, DivInfo } from \"./Filminfo.styled\";\nimport PropTypes from \"prop-types\";\n\nexport const FilmInfo = ({ title, popularity, overview, genres }) => {\n  return <DivInfo>\n    <h1>{title}</h1>\n    <p>Rating: {popularity}%</p>\n    <h2>Overview</h2>\n    <p>{overview}</p>\n    <h2>Genres</h2>\n    <Ul>\n      {genres.map(movie => {\n        return <li key={movie.id}>{movie.name}</li>\n      })}\n    </Ul>\n  </DivInfo>\n};\n\n\nFilmInfo.propTypes = {\n  title: PropTypes.string.isRequired,\n  popularity: PropTypes.number.isRequired,\n  overview: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired\n}","import { NavLink, Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Div = styled.div`\ndisplay: flex;\ngap: 15px;\nmargin-top: 15px;\npadding: 5px;\n`;\nexport const Button = styled.button`\nmargin-top: 10px;\npadding: 5px 10px;\ncursor: pointer;\nborder-radius: 3px;\nborder: 1px solid #1e81b0;\n&:hover, \n :focus {\n    background-color: #e28743;\n    border: 1px solid #e28743;\n};\n`;\n\nexport const ButtonLink = styled(Link)`\ntext-decoration: none;\n`;\n\nexport const PosterDiv = styled.div`\nmax-width: 360px;\n`;\n\nexport const InfoDiv = styled.div`\npadding: 5px;\n`;\n\nexport const PageLink = styled(NavLink)`\ndisplay: block;\ntext-decoration: none;\nmargin-top: 10px;\nfont-size: 20px;\ncolor: #1e81b0;\nwidth: 80px;\n&:hover, \n :focus {\n    color: #e28743;\n};\n\n&.active {\n    color: #e28743;\n}\n\n`;\n\n","\nimport { useEffect, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport Notiflix from 'notiflix';\nimport { getInfoByFilm } from \"../../Api/Api\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Poster } from \"components/Poster/Poster\";\nimport { FilmInfo } from \"components/FilmInfo/FilmInfo\";\nimport { PosterDiv, Div, Button, InfoDiv, PageLink, ButtonLink } from \"./MovieDetails.styled\";\n\n\nexport const MovieDetails = () => {\n  const { id } = useParams();\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [ status, setStatus ] = useState('idle');\n  const location = useLocation();\n  const GoBack = location.state?.from ?? '/';\n\n  useEffect(() => {\n \n    setLoading(true);\n    setStatus('loading');\n\n    const apiDetailsMovie = async () => {\n      const results = await getInfoByFilm(id);\n\n      if (results === 0) {\n        Notiflix.Notify.info('Sorry, No video list :(');\n        return;\n      }\n      setMovies( results  );\n      setStatus('fulfilled');\n    }\n\n    apiDetailsMovie()\n    .catch((error) => {\n      Notiflix.Notify.warning(`Something went wrong! ${error}`);\n      setStatus('error');\n    })\n    .finally(() => {\n      setLoading(false);\n    });\n    \n  }, [id]);\n\n  if (status === 'idle' || loading) {\n    return <Loader />\n  };\n\n  if ( status === 'error') {\n    return <> Error, Something went wrong!</>\n  };\n\n  const { poster_path, title, overview, genres, popularity } = movies;\n\n  return <>\n  <Button>\n  <ButtonLink to={GoBack}>Go back</ButtonLink>\n  </Button>\n      <Div>\n        <PosterDiv>\n        <Poster\n          poster={poster_path}\n          title={title} />\n      </PosterDiv>\n      <FilmInfo\n        title={title}\n        overview={overview}\n        genres={genres}\n        popularity={popularity} />\n    </Div>\n    <InfoDiv>\n      <h3>Additional information</h3>\n      <PageLink to=\"cast\" state={location.state}>Cast</PageLink>\n      <PageLink to=\"reviews\" state={location.state}>Reviews</PageLink>\n    </InfoDiv>\n    <Outlet />\n    </>    \n};\n\nexport default MovieDetails;"],"names":["BASE_URL","API_KEY","getPopularFilm","axios","fetchAPI","data","getInfoByFilm","id","searchMoviesbyName","query","getMovieCredits","getMovieReviews","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","Poster","poster","title","src","alt","Ul","styled","DivInfo","FilmInfo","popularity","overview","genres","map","movie","name","Div","Button","ButtonLink","Link","PosterDiv","InfoDiv","PageLink","NavLink","MovieDetails","useParams","useState","movies","setMovies","loading","setLoading","status","setStatus","location","useLocation","GoBack","state","from","useEffect","apiDetailsMovie","results","Notiflix","catch","error","finally","poster_path","to"],"sourceRoot":""}