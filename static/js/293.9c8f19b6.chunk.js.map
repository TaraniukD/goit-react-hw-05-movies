{"version":3,"file":"static/js/293.9c8f19b6.chunk.js","mappings":"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","sources":["Api/Api.js","components/Poster/Poster.jsx","pages/SearchMovies/SearchMovies.styled.js","pages/SearchMovies/SearchMovies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6e3f0e76f4e133cf6c14fe47c545e154';\n\nexport const getPopularFilm = async () => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n  \nexport const getInfoByFilm = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const searchMoviesbyName = async (query) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const getMovieCredits = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n\nexport const getMovieReviews = async (id) => {\n  const fetchAPI = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const data = await fetchAPI.data;\n  return data;\n};\n","import React from \"react\";\nimport PropType from \"prop-types\";\n\nexport const Poster = ({ poster, title }) => {\n\n  return <>\n    {poster ?\n      <img src={`https://image.tmdb.org/t/p/w500/${poster}`}\n        alt={title}\n        width=\"100%\"\n        height=\"100%\"\n      /> :\n      <img src=\"https://p.kindpng.com/picc/s/736-7369205_play-button-png-pic-video-default-transparent-png.png\"\n        alt={title}\n        width=\"100%\"\n        height=\"100%\"\n      />}\n  </>\n};\n\nPoster.propTypes = {\n  poster: PropType.string,\n  title: PropType.string.isRequired\n};","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const SearchDiv = styled.div`\nmargin: 15px auto;\nmax-width: 1200px\n`;\n\nexport const Input = styled.input`\npadding: 8px 10px;\nborder-radius: 4px;\nmin-width: 220px;\n`;\n\nexport const Button = styled.button`\nmargin-left: 15px;\npadding: 8px 15px;\nborder: 1px solid #eeeee4;\nborder-radius: 4px;\ncursor: pointer;\n\n&:hover,\n :focus {\n    background-color: #eab676;\n    border: 1px solid #eab676;\n}\n`;\n\nexport const Ul = styled.ul`\nmax-width: 1200px;\npadding: 0;\n`;\n\nexport const LinkLi = styled(Link)`\ndisplay: flex;\nmargin-top: 5px;\ngap: 10px;\nborder: 1px solid #eeeee4;\nborder-radius: 4px;\ntext-decoration: none;\ncolor: #154c79;\nscale: 1;\n&:hover, \n :focus {\n    scale: 1.02;\n};\n`;\n\nexport const PosterImg = styled.div`\nwidth: 40px;\nheight: 50px;\n`;","import { React, useEffect, useState } from 'react';\nimport { searchMoviesbyName } from \"Api/Api\";\nimport Notiflix from \"notiflix\";\nimport { generatePath, useSearchParams } from 'react-router-dom';\nimport { PAGE_NAME } from 'router/paths';\nimport { SearchDiv, Button, Ul, Input, LinkLi, PosterImg } from './SearchMovies.styled';\nimport { Poster } from 'components/Poster/Poster';\n\nexport const SearchMovies = () => {\n\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const query = searchParams.get('query') ?? '';\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        };\n\n        const apiSearchMovie = async () => {\n            const { results } = await searchMoviesbyName(query);\n\n            if (!results) {\n                Notiflix.Notify.info('No data in the request!');\n                return;\n            }\n            setMovies(results);\n        };\n\n        apiSearchMovie().catch((error) => {\n            Notiflix.Notify.warning(`Something went wrong! ${error}`);\n        });\n    }, [query]);\n\n    const formSubmit = (e) => {\n        e.preventDefault();\n        const value = e.target.elements.query.value.trim().toLowerCase();\n\n        if (value.trim() === '') {\n            Notiflix.Notify.info('Enter the name of the movies!');\n            return;\n        };\n        \n        setSearchParams( value ? { query: value } : {});\n        e.target.reset();\n    };\n\n    return (\n        <SearchDiv>\n            <form onSubmit={formSubmit} >\n                <Input\n                    type=\"text\"\n                    name=\"query\"\n                    autoFocus\n                    placeholder=\"Search movies\"\n                />\n                <Button type=\"submit\">Search</Button>\n            </form>\n    \n            <Ul>\n                {movies.map(({ id, poster_path, title }) => {\n                    return <li key={id}>\n                        <LinkLi \n                         to={generatePath(PAGE_NAME.movies, { id: id })}\n                         state={{ from: `${PAGE_NAME.search}?query=${query}` }} >\n                            <PosterImg>\n                                <Poster poster={poster_path} title={title} />\n                            </PosterImg>\n                            <p>{title}</p>\n                        </LinkLi>\n                    </li>\n                })}\n            </Ul>\n        </SearchDiv>\n    );\n};\n\nexport default SearchMovies;"],"names":["BASE_URL","API_KEY","getPopularFilm","axios","fetchAPI","data","getInfoByFilm","id","searchMoviesbyName","query","getMovieCredits","getMovieReviews","Poster","poster","title","src","alt","width","height","SearchDiv","styled","Input","Button","Ul","LinkLi","Link","PosterImg","SearchMovies","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","apiSearchMovie","results","Notiflix","catch","error","onSubmit","e","preventDefault","value","target","elements","trim","toLowerCase","reset","type","name","autoFocus","placeholder","map","poster_path","to","generatePath","PAGE_NAME","state","from"],"sourceRoot":""}